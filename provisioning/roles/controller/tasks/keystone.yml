---
# Configure Keystone
- apt: name=keystone state=present update_cache=yes cache_valid_time=86400
- apt: name=python-keystoneclient state=present update_cache=yes cache_valid_time=86400

- name: ensure sqlite keystone database is deleted
  action: file dest=/var/lib/keystone/keystone.db state=absent

- name: Configure keystone
  template: src=keystone.conf.j2 dest=/etc/keystone/keystone.conf
  register: keystone_cfg

- mysql_db: name=keystone state=present
  register: keystonedb_create

- mysql_user: name=keystone host={{ item }} password={{ KEYSTONE_DBPASS }} priv=keystone.*:ALL state=present
  with_items:
    - localhost
    - "%"
  register: mysql_login

- name: keystone db_sync
  command: /bin/sh -c "keystone-manage db_sync" keystone
  when: keystonedb_create.changed

- name: restart keystone
  service: name=keystone state=restarted
  when: keystone_cfg.changed

- name: pause after keystone restart
  pause: seconds=5
  when: keystone_cfg.changed

 # Hourly crontab job to delete expired tokens
- name: "keystone token flush cron"
  cron: name="keystone token flush" special_time="hourly"
        user="keystone" job="/usr/bin/keystone-manage token_flush >> /var/log/keystone/keystone-tokenflush.log 2>&1"

# Create a admin tenant and user
- keystone_user: tenant=admin tenant_description="Admin Tenant" 
                 endpoint={{ os_endpoint }} token={{ os_admin_token }}
- keystone_user: user=admin tenant=admin password={{ ADMIN_PASS }}
                 endpoint={{ os_endpoint }} token={{ os_admin_token }}
- keystone_user: role=admin user=admin tenant=admin
                 endpoint={{ os_endpoint }} token={{ os_admin_token }}

# Create a service tenant
- keystone_user: tenant=service tenant_description="Service Tenant" 
                 endpoint={{ os_endpoint }} token={{ os_admin_token }}

# Create a demo tenant and user
- keystone_user: tenant=demo tenant_description="Demo Tenant" 
                 endpoint={{ os_endpoint }} token={{ os_admin_token }}
- keystone_user: user=demo tenant=demo password={{ DEMO_PASS }}
                 endpoint={{ os_endpoint }} token={{ os_admin_token }}

# Create service entity

- name: check for keystone service entity
  shell: "keystone --os-endpoint {{ os_endpoint }} --os-token {{ os_admin_token }} service-get keystone  2>&1"
  register: check_keystone_service
  changed_when: ("No service" in check_keystone_service.stdout)
  failed_when: check_keystone_service.rc != 0 and not ("No service" in check_keystone_service.stdout)

- name: create keystone service entity
  command: keystone --os-endpoint {{ os_endpoint }} --os-token {{ os_admin_token }} service-create --name keystone --type identity --description "OpenStack Identity"
  when: check_keystone_service.changed

# Create API endpoints

- name: check for keystone API endpoint
  shell: "keystone --os-endpoint {{ os_endpoint }} --os-token {{ os_admin_token }} endpoint-list  2>&1 | grep '5000'"
  register: check_api_endpoints
  failed_when: check_api_endpoints.rc != 0 and check_api_endpoints.stdout != ""
  changed_when: check_api_endpoints.stdout == ""

# Need the service entity ID when creating the API endpoint
- name: get service entity identity id
  shell: "keystone --os-endpoint {{ os_endpoint }} --os-token {{ os_admin_token }} service-list | awk '/ identity / {print $2}'"
  register: entity_id
  ignore_errors: True
  when: check_api_endpoints.changed

- name: create API endpoints
  shell: >
    keystone --os-endpoint {{ os_endpoint }} --os-token {{ os_admin_token }} endpoint-create
    --service-id {{ entity_id.stdout }}
    --publicurl http://{{ ansible_eth0.ipv4.address }}:5000/v2.0
    --internalurl http://controller:5000/v2.0
    --adminurl http://{{ ansible_eth0.ipv4.address }}:35357/v2.0
    --region regionOne
  when: check_api_endpoints.changed
  